version: '3.8'
name: base_services

services:
  minio:
    image: quay.io/minio/minio
    container_name: ${COMPOSE_PROJECT_NAME}_minio
    restart: unless-stopped
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    networks:
      - services-network
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - ${MINIO_DATA_DIR}:/data
    command: server /data --console-address ":9001"

  mongo:
    image: mongo:latest
    container_name: ${COMPOSE_PROJECT_NAME}_mongo
    ports:
      - "${MONGO_PORT}:27017"
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      MONGODB_DATA_DIR: ${MONGODB_DATA_DIR}
      MONDODB_LOG_DIR: ${MONDODB_LOG_DIR}
    networks:
      - services-network
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s

    volumes:
      - type: bind
        source: ${MONGO_DATA_DIR}
        target: ${MONGODB_DATA_DIR}

  prometheus:
    image: prom/prometheus:latest
    container_name: ${COMPOSE_PROJECT_NAME}_prometheus
    restart: unless-stopped
    volumes:
      - ./config:/etc/prometheus/
      - prometheus-data:/prometheus
    networks:
      - prometheus-network
    ports:
      - "${PROMETHEUS_PORT}:9090"

  grafana:
    image: grafana/grafana:latest
    container_name: ${COMPOSE_PROJECT_NAME}_grafana
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - prometheus-network
    ports:
      - "${GRAFANA_PORT}:3000"

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: ${COMPOSE_PROJECT_NAME}_node_exporter
    command:
      - '--path.rootfs=/host'
    pid: host
    ports:
      - "${NODE_EXPORTER_PORT}:9100"
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - prometheus-network

  nvidia-dcgm-exporter:
    image: nvcr.io/nvidia/k8s/dcgm-exporter:3.3.7-3.5.0-ubuntu22.04
    container_name: ${COMPOSE_PROJECT_NAME}_nvidia-dcgm-exporter
    pid: host
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [ gpu ]
    restart: unless-stopped
    ports:
      - "${NVIDIA_DCGM_EXPORTER_PORT}:9400"
    networks:
      - prometheus-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: ${COMPOSE_PROJECT_NAME}_cadvisor
    restart: unless-stopped
    ports:
      - "${CADVISOR_PORT}:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    depends_on:
      - redis
    networks:
      - prometheus-network

  redis:
    image: redis:latest
    container_name: ${COMPOSE_PROJECT_NAME}_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - services-network

  portainer:
    image: portainer/portainer-ce:latest
    container_name: ${COMPOSE_PROJECT_NAME}_portainer
    restart: unless-stopped
    ports:
      - "${PORTAINER_PORT}:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    networks:
      - services-network

  portainer-agent:
    image: portainer/agent:2.33.0
    container_name: ${COMPOSE_PROJECT_NAME}_portainer_agent
    restart: always
    ports:
      - "${PORTAINER_AGENT_PORT}:9001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
      - /:/host
    networks:
      - services-network
    depends_on:
      - portainer

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  portainer-data:
    driver: local

networks:
  services-network:
    driver: bridge
  prometheus-network:
    driver: bridge
