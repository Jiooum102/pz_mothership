name: Deploy MinIO

on:
  workflow_dispatch:
    inputs:
      recreate:
        description: 'Force recreation (docker compose up --force-recreate)'
        required: false
        default: 'false'
  push:
    branches: [ main, master ]
    paths:
      - 'deployments/docker-compose.yml'
      - '.github/workflows/deploy-minio.yml'

concurrency:
  group: deploy-minio
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: self-hosted
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Prepare MinIO env file
        working-directory: deployments
        env:
          COMPOSE_PROJECT_NAME: ${{ vars.COMPOSE_PROJECT_NAME }}
          MINIO_PORT: ${{ vars.MINIO_PORT }}
          MINIO_CONSOLE_PORT: ${{ vars.MINIO_CONSOLE_PORT }}
          MINIO_ROOT_USER: ${{ secrets.MINIO_ROOT_USER }}
          MINIO_ROOT_PASSWORD: ${{ secrets.MINIO_ROOT_PASSWORD }}
          MINIO_DATA_DIR: ${{ vars.MINIO_DATA_DIR }}
        run: |
          set -euo pipefail
          : "${COMPOSE_PROJECT_NAME:=pzms}"; : "${MINIO_PORT:=9000}"; : "${MINIO_CONSOLE_PORT:=9001}"; : "${MINIO_DATA_DIR:=/srv/minio}"
          if [ -z "${MINIO_ROOT_USER}" ] || [ -z "${MINIO_ROOT_PASSWORD}" ]; then echo 'Missing MinIO secrets' >&2; exit 1; fi
          mkdir -p "${MINIO_DATA_DIR}"
          cat > .env <<EOF
COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}
MINIO_PORT=${MINIO_PORT}
MINIO_CONSOLE_PORT=${MINIO_CONSOLE_PORT}
MINIO_ROOT_USER=${MINIO_ROOT_USER}
MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
MINIO_DATA_DIR=${MINIO_DATA_DIR}
EOF
          sed -E 's/(PASSWORD|ROOT_PASSWORD)=.*/\1=****/g' .env

      - name: Start MinIO service
        working-directory: deployments
        env:
            RECREATE: ${{ github.event.inputs.recreate }}
        run: |
          set -euo pipefail
          FLAGS="--detach --remove-orphans --pull always"
          if [ "${RECREATE}" = "true" ]; then FLAGS="${FLAGS} --force-recreate"; fi
          docker compose -f docker-compose.yml pull minio
          docker compose -f docker-compose.yml up ${FLAGS} minio

      - name: Wait for MinIO port
        env:
          MINIO_PORT: ${{ vars.MINIO_PORT }}
        run: |
          set -euo pipefail
          : "${MINIO_PORT:=9000}"
          for i in {1..20}; do
            if docker ps --filter name=_minio --format '{{"{{.Names}}"}}' | grep -q minio && nc -z localhost "${MINIO_PORT}"; then
              echo 'MinIO responding'; exit 0; fi
            echo "Waiting for MinIO ($i)..."; sleep 3
          done
          echo 'MinIO not responding in time' >&2; exit 1

      - name: Show MinIO container
        run: docker ps --filter name=_minio --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}'

      - name: Logs on failure
        if: failure()
        run: docker logs $(docker ps -aq --filter name=_minio | head -n1) || true
