name: Deploy MongoDB

on:
  workflow_dispatch:
    inputs:
      recreate:
        description: 'Force recreation (docker compose up --force-recreate)'
        required: false
        default: 'false'
  push:
    branches: [ main, master ]
    paths:
      - 'deployments/docker-compose.yml'
      - '.github/workflows/deploy-mongodb.yml'

concurrency:
  group: deploy-mongodb
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: self-hosted
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Prepare Mongo env file
        working-directory: deployments
        env:
          COMPOSE_PROJECT_NAME: ${{ vars.COMPOSE_PROJECT_NAME }}
          MONGO_PORT: ${{ vars.MONGO_PORT }}
          MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
          MONGO_INITDB_DATABASE: ${{ vars.MONGO_INITDB_DATABASE }}
          MONGO_DATA_DIR: ${{ vars.MONGO_DATA_DIR }}
        run: |
          set -euo pipefail
          : "${COMPOSE_PROJECT_NAME:=pzms}"; : "${MONGO_PORT:=27017}"; : "${MONGO_INITDB_DATABASE:=appdb}"; : "${MONGO_DATA_DIR:=/srv/mongo}"
          if [ -z "${MONGO_INITDB_ROOT_USERNAME}" ] || [ -z "${MONGO_INITDB_ROOT_PASSWORD}" ]; then echo 'Missing Mongo secrets' >&2; exit 1; fi
          mkdir -p "${MONGO_DATA_DIR}"
          cat > .env <<EOF
COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}
MONGO_PORT=${MONGO_PORT}
MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
MONGO_DATA_DIR=${MONGO_DATA_DIR}
MONGODB_DATA_DIR=/data/db
MONDODB_LOG_DIR=/var/log/mongodb
EOF
          sed -E 's/(PASSWORD)=.*/\1=****/g' .env

      - name: Start Mongo service
        working-directory: deployments
        env:
          RECREATE: ${{ github.event.inputs.recreate }}
        run: |
          set -euo pipefail
          FLAGS="--detach --remove-orphans --pull always"
          if [ "${RECREATE}" = "true" ]; then FLAGS="${FLAGS} --force-recreate"; fi
          docker compose -f docker-compose.yml pull mongo
          docker compose -f docker-compose.yml up ${FLAGS} mongo

      - name: Wait for MongoDB healthy
        run: |
          set -euo pipefail
          for i in {1..20}; do
            if docker ps --filter name=_mongo --filter health=healthy --format '{{"{{.Names}}"}}' | grep -q mongo; then echo 'MongoDB healthy'; exit 0; fi
            echo "Waiting for MongoDB health ($i)..."; sleep 3
          done
          echo 'MongoDB not healthy in time' >&2; exit 1

      - name: Show Mongo container
        run: docker ps --filter name=_mongo --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}'

      - name: Logs on failure
        if: failure()
        run: docker logs $(docker ps -aq --filter name=_mongo | head -n1) || true
